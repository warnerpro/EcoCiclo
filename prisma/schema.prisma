// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(uuid())
  name              String
  cpf               String            @unique
  birthDate         DateTime
  email             String            @unique
  password          String
  userType          String // Define se é "CATADOR" ou "USUARIO"
  score             Int               @default(0) // Pontos acumulados no sistema
  pontosCriados     PontoColeta[]     @relation(name: "user_point_author") // Pontos criados pelo usuário
  itensColocados    PontoColetaItem[] @relation(name: "user_item_author") // Itens colocados pelo usuário
  coletasRealizadas Coleta[]          @relation(name: "user_catador") // Coletas realizadas pelo usuário
  achievements      Achievement[]     // Conquistas do usuário
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Achievement {
  id        Int      @id @default(autoincrement())
  description String
  score     Int
  iconKey   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Foto {
  id        Int      @id @default(autoincrement())
  key      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item PontoColetaItem[]
}

model PontoColeta {
  id        Int               @id @default(autoincrement())
  name      String
  latitude  Float // Latitude do ponto
  longitude Float // Longitude do ponto
  itens     PontoColetaItem[]
  authorId  String
  author    User              @relation(name: "user_point_author", fields: [authorId], references: [id]) // Quem criou o ponto
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model PontoColetaItem {
  id            Int         @id @default(autoincrement())
  pontoColeta   PontoColeta @relation(fields: [pontoColetaId], references: [id])
  pontoColetaId Int
  coletado      Boolean     @default(false)
  categoriaId   Int
  categoria     Categoria   @relation(fields: [categoriaId], references: [id])
  coletaId  Int?
  coleta    Coleta?  @relation(fields: [coletaId], references: [id])
  foto      Foto?   @relation(fields: [fotoId], references: [id])
  fotoId   Int?
  autorId   String
  autor     User     @relation(name: "user_item_author", fields: [autorId], references: [id]) // Quem adicionou o item
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coleta {
  id        Int               @id @default(autoincrement())
  name      String
  score     Int // Pontos atribuídos para a coleta
  catadorId String
  catador   User              @relation(name: "user_catador", fields: [catadorId], references: [id])
  itens     PontoColetaItem[]
  status    String            @default("PENDENTE") // Pode ser "PENDENTE", "EM_ANDAMENTO", "CONCLUIDA"
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Categoria {
  id      Int    @id @default(autoincrement())
  name    String
  iconKey String // Referência ao ícone

  itens PontoColetaItem[]
}
